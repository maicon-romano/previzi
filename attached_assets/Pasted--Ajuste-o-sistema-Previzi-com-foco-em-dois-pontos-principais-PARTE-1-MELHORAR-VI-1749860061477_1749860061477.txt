


Ajuste o sistema Previzi com foco em dois pontos principais:

---

üü¢ PARTE 1: MELHORAR VISUAL DAS NOTIFICA√á√ïES (TOASTS)

Problema atual: As notifica√ß√µes est√£o ficando **transparentes, sem contraste e visualmente feias**.

‚úÖ Ajustes esperados:

- Deixar o visual das notifica√ß√µes moderno, leg√≠vel e com bom contraste.
- Remover transpar√™ncia exagerada. Fundo deve ser s√≥lido com leve sombra.
- Aplicar borda arredondada (ex: rounded-lg).
- Tipografia clara (ex: text-white ou text-black dependendo do tema).
- Usar cores padr√£o para cada tipo de mensagem:
  - Sucesso: Verde (#22c55e ou similar)
  - Erro: Vermelho (#ef4444 ou similar)
  - Info: Azul (#3b82f6 ou similar)
  - Aviso: Amarelo (#facc15 ou similar)
- Garantir que o toast tenha:
  - Barra de progresso visual (linha ou anima√ß√£o)
  - Bot√£o de fechar (√≠cone X)
  - Tempo de exibi√ß√£o autom√°tica entre 3 a 5 segundos
  - No m√°ximo 3 notifica√ß√µes empilhadas ao mesmo tempo
- Exibir no canto inferior direito da tela
- Responsivo para mobile

Tecnologias permitidas: Tailwind CSS + Framer Motion ou biblioteca como Sonner / React Toastify.

---

üü¢ PARTE 2: AJUSTAR L√ìGICA DE TRANSA√á√ïES RECORRENTES

Problema atual: As transa√ß√µes recorrentes est√£o sendo criadas apenas para 1 ano (12 meses). Quero mais controle.

‚úÖ Novos comportamentos esperados:

1. Nova op√ß√£o no formul√°rio de transa√ß√£o: **"Dura√ß√£o da recorr√™ncia"**  
O usu√°rio poder√° escolher entre:

- **Recorr√™ncia Infinita**:  
  - Exemplo: Sal√°rio fixo, conta de energia cont√≠nua
  - Deve gerar transa√ß√µes automaticamente √† medida que os meses forem acessados no sistema (ex: sempre gerar o pr√≥ximo m√™s quando o usu√°rio abrir o sistema ou via cron)

- **Recorr√™ncia com Prazo Determinado**:  
  - Exemplo: Parcelamento de 6 meses, curso que dura 3 meses, etc.
  - O usu√°rio informar√°:
    - **Quantidade de meses** (ex: 6x)
    - **Data de t√©rmino** (ex: at√© dezembro de 2025)

2. Ajuste a l√≥gica de cria√ß√£o:
- Se for **infinita**, o sistema s√≥ cria o m√™s atual e vai criando os pr√≥ximos meses dinamicamente sempre que necess√°rio (ex: ao abrir um m√™s futuro)
- Se for **prazo definido**, o sistema j√° cria todas as parcelas desde a data de in√≠cio at√© o t√©rmino (ou n√∫mero de meses)

3. Adicionar campos novos no Firestore em cada transa√ß√£o criada:

```json
{
  "recurring": true,
  "recurringType": "infinite" | "fixed",
  "recurringMonths": 6, // apenas se for fixed por n√∫mero de meses
  "recurringEndDate": "2025-12-31", // apenas se for fixed por data
}
````

4. Garantir que as transa√ß√µes futuras apare√ßam nas visualiza√ß√µes por m√™s (junho, julho, agosto‚Ä¶).

5. Para transa√ß√µes com valor vari√°vel, permitir que o campo `amount` seja salvo como `null` ou `0` e o usu√°rio edite m√™s a m√™s.

6. Toda cria√ß√£o de transa√ß√£o recorrente deve continuar salvando o campo `userId` corretamente.

--- 

Fa√ßa os ajustes tanto na UI quanto na l√≥gica de backend (Firestore writes). 